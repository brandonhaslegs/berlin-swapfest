---
import tear from "../assets/tear-outline.png";
---

<div class="tabs mt-0">
  {
    Array.from({ length: 16 }).map((_, idx) => (
      <div
        class="tab"
        data-tab-button
        data-breakpoint={idx + 1 > 8 ? "lg" : idx + 1 > 6 ? "md" : "sm"}
      >
        <span class="tab-inner">
          <span class="tab-text">
            <span>BERLIN SWAPFEST</span>
            <span>April 19th @ c-base</span>
          </span>
        </span>
      </div>
    ))
  }

  <img src={tear.src} alt="tear" class="tear" />
</div>

<style>
  /* RIP OFF TABS */

  .tabs {
    --cols: 6;
    display: grid;
    grid-template-columns: repeat(
      var(--cols),
      minmax(0, calc(100vw / var(--cols)))
    );
    justify-content: center;
    margin-bottom: 0;
    padding: 0;
    width: 100%;
    position: relative;
  }

  @media (min-width: 48rem) {
    .tabs {
      --cols: 8;
    }
  }

  @media (min-width: 80rem) {
    .tabs {
      --cols: 16;
    }
  }

  .tab {
    --border-style: solid;
    --border-width: 1px;

    background: white;
    border-left: var(--border-width) var(--border-style) transparent;
    /* border-top: var(--border-width) var(--border-style) #000; */
    border-right: var(--border-width) var(--border-style) #000;
    border-bottom: var(--border-width) var(--border-style) #000;
    padding: 10px;
    cursor: pointer;
    text-align: center;
    transition:
      transform 1s,
      opacity 1s;
    margin: 0;
    position: relative;
    opacity: 1;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .tab:first-child {
    border-left: var(--border-width) var(--border-style) #000;
  }

  .tab[data-tab-trashed] {
    pointer-events: none;
  }
  .tab[data-tab-trashed] + .tab {
    border-left: var(--border-width) var(--border-style) #000;
  }

  .tab[data-breakpoint="sm"] {
    display: flex;
  }

  .tab[data-breakpoint="md"],
  .tab[data-breakpoint="lg"] {
    display: none;
  }

  @media (min-width: 48rem) {
    .tab[data-breakpoint="md"] {
      display: flex;
    }
  }

  @media (min-width: 80rem) {
    .tab[data-breakpoint="lg"] {
      display: flex;
    }
  }

  .tab-inner {
    width: 50px;
    height: 168px;
  }

  .tab-text {
    transform: rotate(90deg);
    text-align: center;
    white-space: nowrap;
    display: flex;
    flex-direction: column;
  }

  .tear {
    position: absolute;
    inset: 0;
    width: 100%;
    z-index: -1;
    object-fit: contain;
  }
</style>

<script>
  import { animate } from "animejs";

  import { DESCRIPTION, TITLE } from "../constants/seo";

  const buttons = document.querySelectorAll("[data-tab-button]");

  // Add event listeners to fire confetti when a button is clicked.
  buttons.forEach((button) => {
    button.addEventListener("click", () => tearOff(button));
  });

  function tearOff(tab: Element) {
    animate(tab, {
      opacity: {
        to: 0,
        duration: 0.3,
        ease: "inElastic",
      },
      y: {
        to: 168,
        ease: "inElastic",
        duration: 0.3,
      },
    });

    tab.setAttribute("data-tab-trashed", "");

    downloadICS();
  }

  function downloadICS() {
    const icsContent = [
      `BEGIN:VCALENDAR`,
      `VERSION:2.0`,
      `BEGIN:VEVENT`,
      `SUMMARY:${TITLE}`,
      `DTSTART;TZID=Europe/Berlin:${"20250419T120000"}`,
      `DTEND;TZID=Europe/Berlin:${"20250419T180000"}`,
      `LOCATION:${"Rungestra√üe 20, Berlin, 10179, Germany"}`,
      `DESCRIPTION:${DESCRIPTION}`,
      `END:VEVENT`,
      `END:VCALENDAR`,
    ].join("\n");

    const blob = new Blob([icsContent], { type: "text/calendar" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "berlin-swapfest-april-19-2025.ics";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
</script>
